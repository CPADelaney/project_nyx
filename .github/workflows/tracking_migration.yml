name: Tracking Module Migration

on:
  workflow_dispatch:
    inputs:
      update_imports:
        description: 'Update imports automatically'
        required: true
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      create_pull_request:
        description: 'Create Pull Request with changes'
        required: true
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  scan-imports:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      
      - name: Run migration utility
        id: migration
        run: |
          echo "Running migration utility if needed"
          if [ -f "tracking/migration_utility.py" ]; then
            python -m tracking.migration_utility
            echo "::set-output name=migration_run::true"
          else
            echo "::set-output name=migration_run::false"
            echo "Migration utility not found - skipping database migration"
          fi
      
      - name: Copy import scanner script
        run: |
          mkdir -p scripts
          cat > scripts/tracking_import_scanner.py << 'EOF'
${{ github.workspace }}/tracking/tracking_import_scanner.py
EOF
          chmod +x scripts/tracking_import_scanner.py
      
      - name: Scan for old imports
        id: scan
        run: |
          python scripts/tracking_import_scanner.py --output import_scan_report.json --github-output
      
      - name: Update imports if requested
        if: ${{ github.event.inputs.update_imports == 'true' }}
        run: |
          python scripts/tracking_import_scanner.py --update --output import_scan_updated_report.json --github-output
      
      - name: Upload scan reports
        uses: actions/upload-artifact@v3
        with:
          name: import-scan-reports
          path: |
            import_scan_report.json
            import_scan_updated_report.json
          if-no-files-found: warn
      
      - name: Create Pull Request with changes
        if: ${{ github.event.inputs.update_imports == 'true' && github.event.inputs.create_pull_request == 'true' }}
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update tracking module imports to use unified system"
          title: "Tracking Module Migration: Update imports"
          body: |
            # Tracking Module Migration
            
            This PR updates imports from old tracking modules to use the new unified tracking system.
            
            ## Changes:
            - Updates old tracking imports to use `get_tracking_system()`
            - Prepares for further refactoring of module usage
            
            Please review the import changes carefully and then update the usage patterns as suggested in the scan report.
            
            Generated by the Tracking Module Migration workflow.
          branch: tracking-migration
          delete-branch: true
      
      - name: Create usage guide
        run: |
          echo "# Tracking Module Usage Migration Guide" > MIGRATION_GUIDE.md
          echo "" >> MIGRATION_GUIDE.md
          echo "This guide shows you how to update code that uses the old tracking modules to use the new unified system." >> MIGRATION_GUIDE.md
          echo "" >> MIGRATION_GUIDE.md
          echo "## Files needing updates" >> MIGRATION_GUIDE.md
          echo "" >> MIGRATION_GUIDE.md
          
          python -c "
import json
with open('import_scan_report.json', 'r') as f:
    data = json.load(f)
    
with open('MIGRATION_GUIDE.md', 'a') as guide:
    for file_info in data['files']:
        file_path = file_info['file']
        guide.write(f'### {file_path}\n\n')
        
        guide.write('#### Import Changes:\n\n')
        guide.write('```python\n')
        for imp in file_info['imports_found']:
            guide.write(f'# Old: {imp[\"match\"]}\n')
            guide.write(f'# New: from tracking.tracking_system import get_tracking_system\n\n')
        guide.write('```\n\n')
        
        if file_info['usage_updates']:
            guide.write('#### Usage Changes:\n\n')
            guide.write('```python\n')
            for usage in file_info['usage_updates']:
                guide.write(f'# Old: {usage[\"old\"]}\n')
                if usage['type'] == 'initialization':
                    guide.write(f'# New: tracking_system = get_tracking_system()\n\n')
                elif usage['type'] == 'method_call':
                    guide.write(f'# New: {usage[\"new\"]}\n\n')
            guide.write('```\n\n')
        
        guide.write('---\n\n')
          "
      
      - name: Upload migration guide
        uses: actions/upload-artifact@v3
        with:
          name: migration-guide
          path: MIGRATION_GUIDE.md
          if-no-files-found: warn
      
      - name: Summary
        run: |
          echo "## Import Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Files with old imports: ${{ steps.scan.outputs.files_with_imports }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Total imports to update: ${{ steps.scan.outputs.total_imports }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.update_imports }}" == "true" ]]; then
            echo "✅ Files updated automatically: ${{ steps.scan.outputs.files_updated }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.migration.outputs.migration_run }}" == "true" ]]; then
            echo "✅ Database migration completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Database migration was skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the artifacts for the detailed report and migration guide." >> $GITHUB_STEP_SUMMARY
